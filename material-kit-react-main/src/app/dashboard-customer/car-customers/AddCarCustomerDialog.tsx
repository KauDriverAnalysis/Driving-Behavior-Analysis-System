import * as React from 'react';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import Button from '@mui/material/Button';
import FormControl from '@mui/material/FormControl';
import FormHelperText from '@mui/material/FormHelperText';
import InputLabel from '@mui/material/InputLabel';
import OutlinedInput from '@mui/material/OutlinedInput';
import Grid from '@mui/material/Grid';
import { useTheme } from '@mui/material/styles';
import MenuItem from '@mui/material/MenuItem';
import Select from '@mui/material/Select';
import Alert from '@mui/material/Alert';
import Collapse from '@mui/material/Collapse';
import IconButton from '@mui/material/IconButton';
import CloseIcon from '@mui/icons-material/Close';
import { Car } from '@/components/dashboard-customer/car-customers/car-customers-table';

// Omit the id field since it's generated by the backend
type NewCar = Omit<Car, 'id'>;

interface AddCarCustomerDialogProps {
  open: boolean;
  onClose: () => void;
  onSubmit: (car: NewCar) => void;
}

interface ValidationErrors {
  Plate_number?: string[];
  device_id?: string[];
  [key: string]: string[] | undefined;
}

export default function AddCarCustomerDialog({ 
  open, 
  onClose,
  onSubmit 
}: AddCarCustomerDialogProps): React.JSX.Element {
  const theme = useTheme();
  const [error, setError] = React.useState<string | null>(null);
  const [validationErrors, setValidationErrors] = React.useState<ValidationErrors>({});
  
  const [formData, setFormData] = React.useState<NewCar>({
    model: '',          // Model_of_car
    type: '',           // TypeOfCar
    plateNumber: '',    // Plate_number
    releaseYear: new Date().getFullYear(), // Release_Year_car
    state: 'offline',   // State_of_car
    deviceId: '',       // device_id
    customerId: null,   // customer_id
    companyId: null     // company_id
  });

  // Reset form and errors when dialog opens/closes
  React.useEffect(() => {
    if (open) {
      setError(null);
      setValidationErrors({});
    }
  }, [open]);

  const handleChange = (field: keyof NewCar) => (
    event: React.ChangeEvent<HTMLInputElement | { value: unknown }>
  ) => {
    const value = event.target.value;
    setFormData(prev => ({
      ...prev,
      [field]: field === 'releaseYear' ? Number(value) : value
    }));
    
    // Clear validation error for the field that's being changed
    if (validationErrors[mapFieldToApiName(field)]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[mapFieldToApiName(field)];
        return newErrors;
      });
    }
  };

  // Map frontend field names to backend API field names
  const mapFieldToApiName = (field: keyof NewCar): string => {
    const mapping: Record<string, string> = {
      model: 'Model_of_car',
      type: 'TypeOfCar',
      plateNumber: 'Plate_number',
      releaseYear: 'Release_Year_car',
      state: 'State_of_car',
      deviceId: 'device_id',
      customerId: 'customer_id',
      companyId: 'company_id'
    };
    return mapping[field] || field.toString();
  };

  const validatePlateNumber = (plateNumber: string): boolean => {
    // Plate number should be 3 letters followed by 4 digits
    const regex = /^[A-Za-z]{3}\s?\d{4}$/;
    return regex.test(plateNumber);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null);
    setValidationErrors({});
    
    // Client-side validation
    let clientErrors: ValidationErrors = {};

    if (!validatePlateNumber(formData.plateNumber)) {
      clientErrors.Plate_number = ['Invalid car plate number format. It should be 3 letters followed by 4 digits (e.g., "ABC 1234").'];
    }

    if (!formData.deviceId.trim()) {
      clientErrors.device_id = ['This field is required.'];
    }

    if (Object.keys(clientErrors).length > 0) {
      setValidationErrors(clientErrors);
      return;
    }
    
    try {
      // Format the data to match the backend API expectations
      const apiData = {
        Model_of_car: formData.model,
        TypeOfCar: formData.type,
        Plate_number: formData.plateNumber,
        Release_Year_car: formData.releaseYear,
        State_of_car: formData.state,
        device_id: formData.deviceId
      };
      
      // Direct API call instead of passing to parent
      const response = await fetch('http://localhost:8000/api/create_car/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(apiData),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        if (data.errors) {
          setValidationErrors(data.errors);
          return;
        }
        throw new Error(data.message || 'Failed to add car');
      }

      // Success! Reset form and notify parent
      onSubmit(formData);
      
      // Reset form
      setFormData({
        model: '',
        type: '',
        plateNumber: '',
        releaseYear: new Date().getFullYear(),
        state: 'offline',
        deviceId: '',
        customerId: null,
        companyId: null
      });
    } catch (error) {
      console.error('Error submitting form:', error);
      setError(error instanceof Error ? error.message : 'Failed to add car. Please try again.');
    }
  };

  const isFormValid = () => {
    return (
      formData.model.trim() !== '' &&
      formData.type.trim() !== '' &&
      formData.plateNumber.trim() !== '' &&
      formData.releaseYear > 0 &&
      formData.deviceId.trim() !== '' &&
      Object.keys(validationErrors).length === 0
    );
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle
        sx={{
          backgroundColor: theme.palette.primary.main,
          color: 'white',
          textAlign: 'center',
          fontWeight: 'bold',
          padding: theme.spacing(2),
          borderTopLeftRadius: theme.shape.borderRadius,
          borderTopRightRadius: theme.shape.borderRadius,
        }}
      >
        Add New Car
      </DialogTitle>
      <form onSubmit={handleSubmit}>
        <DialogContent dividers>
          {error && (
            <Collapse in={!!error}>
              <Alert
                severity="error"
                action={
                  <IconButton
                    size="small"
                    color="inherit"
                    onClick={() => setError(null)}
                  >
                    <CloseIcon fontSize="small" />
                  </IconButton>
                }
                sx={{ mb: 2 }}
              >
                {error}
              </Alert>
            </Collapse>
          )}
          
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <FormControl fullWidth required error={!!validationErrors.Model_of_car}>
                <InputLabel>Model</InputLabel>
                <OutlinedInput 
                  label="Model" 
                  value={formData.model}
                  onChange={handleChange('model')}
                />
                {validationErrors.Model_of_car && (
                  <FormHelperText error>{validationErrors.Model_of_car[0]}</FormHelperText>
                )}
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <FormControl fullWidth required error={!!validationErrors.TypeOfCar}>
                <InputLabel>Type</InputLabel>
                <OutlinedInput 
                  label="Type" 
                  value={formData.type}
                  onChange={handleChange('type')}
                />
                {validationErrors.TypeOfCar && (
                  <FormHelperText error>{validationErrors.TypeOfCar[0]}</FormHelperText>
                )}
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required error={!!validationErrors.Plate_number}>
                <InputLabel>Plate Number</InputLabel>
                <OutlinedInput 
                  label="Plate Number" 
                  value={formData.plateNumber}
                  onChange={handleChange('plateNumber')}
                  placeholder="ABC 1234"
                />
                {validationErrors.Plate_number && (
                  <FormHelperText error>{validationErrors.Plate_number[0]}</FormHelperText>
                )}
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required error={!!validationErrors.Release_Year_car}>
                <InputLabel>Release Year</InputLabel>
                <OutlinedInput 
                  label="Release Year" 
                  type="number"
                  value={formData.releaseYear}
                  onChange={handleChange('releaseYear')}
                />
                {validationErrors.Release_Year_car && (
                  <FormHelperText error>{validationErrors.Release_Year_car[0]}</FormHelperText>
                )}
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth error={!!validationErrors.State_of_car}>
                <InputLabel>State</InputLabel>
                <Select
                  value={formData.state}
                  label="State"
                  onChange={handleChange('state')}
                >
                  <MenuItem value="online">Online</MenuItem>
                  <MenuItem value="offline">Offline</MenuItem>
                </Select>
                {validationErrors.State_of_car && (
                  <FormHelperText error>{validationErrors.State_of_car[0]}</FormHelperText>
                )}
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required error={!!validationErrors.device_id}>
                <InputLabel>Device ID</InputLabel>
                <OutlinedInput 
                  label="Device ID" 
                  value={formData.deviceId}
                  onChange={handleChange('deviceId')}
                />
                {validationErrors.device_id && (
                  <FormHelperText error>{validationErrors.device_id[0]}</FormHelperText>
                )}
              </FormControl>
              {!validationErrors.device_id && (
                <FormHelperText>
                  Device ID is required and must be unique
                </FormHelperText>
              )}
            </Grid>

            {/* Display validation info */}
            <Grid item xs={12}>
              <Alert severity="info" sx={{ mt: 1 }}>
                <strong>Validation Rules:</strong>
                <ul style={{ margin: '5px 0 5px 20px', padding: 0 }}>
                  <li>Plate Number: 3 letters followed by 4 digits (e.g., "ABC 1234")</li>
                  <li>Device ID: Required and must be unique</li>
                </ul>
              </Alert>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions sx={{ justifyContent: 'flex-end', padding: theme.spacing(2) }}>
          <Button onClick={onClose} variant="outlined" sx={{ marginRight: theme.spacing(2) }}>
            Cancel
          </Button>
          <Button 
            type="submit" 
            variant="contained" 
            color="primary"
            disabled={!isFormValid()}
          >
            Add Car
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
}